--------------------------------------------------------
CLASS VEC 1.4.0
RPE – Romanesco Processing Environment –
--------------------------------------------------------
inspirated by GLSL and PVector Method of Daniel Shiffman
////////////////////////////////////////////////////////

Like PVector, but closer of GLSL method.
is use to store float value than below

/////////////////////////////////////////
Link about vector
http://acko.net/files/dump/tiles/fieldlines.html



// BE CARAFUL
/////////////////////////////////////
When you built Vec you don't use "new"
like with PVector
E.g : 
--
ok
Vec3 v = Vec3(0) ;
--
not
Vec3 v = new Vec3(0) ;

ok
--
Vec6 v = Vec6(Vec2(),Vec3()) ;
--
Vec6 v = new Vec6(Vec2(),Vec3()) ;
--
this method work only with a pure constructor
--
like
Vec2 v = new Vec3(0,0) ;
...
Vec6 v = new Vec6(0,0,0,0,0,0) ;
--

You can also build a Vec like that :
Vec v = Vec2(float value),
but if you do that after you cannont use the method from the differents types of Vec2, Vec3... you'll only acces to the value.



////////////////////////////////////






Vector 2 value
----------
Vec2()
Vec2(float value)
Vec2(int value)
Vec2(PVector p)
Vec2(float x, float y) 
Vec2(int x, int y) 

Vec2(String arg, int value) 
arg = "RANDOM" or "RANDOM ZERO"

Vec2(String arg, int x, int y) 
arg = "RANDOM" or "RANDOM ZERO" or "RANDOM RANGE"

Vec2(String arg, int a1, int a2, int b1, int b2) 
arg = "RANDOM RANGE"

arg = "RANDOM" 		if the String arg is equal to "RANDOM" the construtor a random value between int -value and int value
arg = "RANDOM ZERO" 	if the String arg is equal to "RANDOM ZERO" the construtor a random value between int 0 and int value
arg = "RANDOM RANGE" if the String arg is equal to "RANDOM RANGE" the construtor a random value between int value_1 and int value_2

you can catch : 
x,y 
s,t
u,v

Vector 3 value
----------
Vec3()
Vec3(float value)
Vec3(intvalue)
Vec3(PVector p)

Create vec from a minus Vec.
Vec3(Vec2 v)
The first componants is the target vec value, the next componant take "0" value.

Vec3(float x,float y, float z) 
Vec3(int x,int y, int z) 

Vec3(String arg, int value) 
arg = "RANDOM" or "RANDOM ZERO"

Vec3(String arg, int x, int y, int z) 
arg = "RANDOM" or "RANDOM ZERO" 

Vec3(String arg, int a1, int a2, int b1, int b2, int c1, int c2) 
arg = "RANDOM RANGE"

arg = "RANDOM" 		if the String arg is equal to "RANDOM" the construtor a random value between int -value and int value
arg = "RANDOM ZERO" 	if the String arg is equal to "RANDOM ZERO" the construtor a random value between int 0 and int value
arg = "RANDOM RANGE" if the String arg is equal to "RANDOM RANGE" the construtor a random value between int value_1 and int value_2

you can catch : 
x,y,z 
r,g,b 
s,t,p


Vector 4 value
----------
Vec4()
Vec4(float value)
Vec4(float x,float y, float z, float w) 
Vec4(int x, int y, int z, int w)

Create vec from a minus Vec.
Vec4(Vec2 v)
Vec4(Vec3 v)
Vec4(Vec2 v,Vec2 v)
The first componants is the target vec value, the next componant take "0" value.

Vec4(String arg, int value) 
arg = "RANDOM" or "RANDOM ZERO" 

Vec4(String arg, int x, int y, int z, int z) 
arg = "RANDOM" or "RANDOM ZERO" 

Vec4(String arg, int a1, int a2, int b1, int b2, int c1, int c2, int d1, int d2) 
arg = "RANDOM RANGE"

arg = "RANDOM" 		if the String arg is equal to "RANDOM" the construtor a random value between int -value and int value
arg = "RANDOM ZERO" 	if the String arg is equal to "RANDOM ZERO" the construtor a random value between int 0 and int value
arg = "RANDOM RANGE" if the String arg is equal to "RANDOM RANGE" the construtor a random value between int value_1 and int value_2

you can catch : 
x,y,z,w 
r,g,b,a 
s,t,p,q


Vector 5 value
----------
Vec5()
Vec5(float value)
Vec5(float a,float b, float c, float d, float e)
Vec5(int a, int b, int c, int d, int e)

Create vec from a minus Vec.
Vec5(Vec2 v)
Vec5(Vec3 v)
Vec5(Vec4 v)
Vec5(Vec2 v,Vec2 v)
Vec5(Vec3 v,Vec2 v)
Vec5(Vec2 v,Vec3 v)
The first componants is the target vec value, the next componant take "0" value.

Vec5(String arg, int value) 
arg = "RANDOM" or "RANDOM ZERO" 

Vec5(String arg, int a, int b, int c, int d, int e)
arg = "RANDOM" or "RANDOM ZERO" 
Vec5(String arg, int a1, int a2, int b1, int b2, int c1, int c2, int d1, int d2, int e1, int e2) 
arg = "RANDOM RANGE"

arg = "RANDOM" 		if the String arg is equal to "RANDOM" the construtor a random value between int -value and int value
arg = "RANDOM ZERO" 	if the String arg is equal to "RANDOM ZERO" the construtor a random value between int 0 and int value
arg = "RANDOM RANGE" if the String arg is equal to "RANDOM RANGE" the construtor a random value between int value_1 and int value_2

you can catch 
a,b,c,d,e


Vector 6 value
----------
Vec6()
Vec6(float value)
Vec6(float a,float b, float c, float d, float e, float f)
Vec6(int a, int b, int c, int d, int e, int f)

Create vec from a minus Vec.
Vec6(Vec2 v)
Vec6(Vec3 v)
Vec6(Vec4 v)
Vec6(Vec5 v)
Vec6(Vec2 v,Vec2 v)
Vec6(Vec3 v,Vec3 v)
Vec6(Vec2 v,Vec2 v,Vec2 v)
Vec6(Vec3 v,Vec2 v)
Vec6(Vec4 v,Vec2 v)
Vec6(Vec2 v,Vec3 v)
Vec6(Vec2 v,Vec4 v)
The first componants is the target vec value, the next componant take "0" value.


Vec6(String arg, int value) 
arg = "RANDOM" or "RANDOM ZERO" 

Vec6(String arg, int a, int b, int c, int d, int e, int f)
arg = "RANDOM" or "RANDOM ZERO" 

Vec5(String arg, int a1, int a2, int b1, int b2, int c1, int c2, int d1, int d2, int e1, int e2, int f1, int f2) 
arg = "RANDOM RANGE"

arg = "RANDOM" 		if the String arg is equal to "RANDOM" the construtor a random value between int -value and int value
arg = "RANDOM ZERO" 	if the String arg is equal to "RANDOM ZERO" the construtor a random value between int 0 and int value
arg = "RANDOM RANGE" if the String arg is equal to "RANDOM RANGE" the construtor a random value between int value_1 and int value_2

you can catch 
a,b,c,d,e,f





// EXTRA / AWESOME / MARVELOUS
//////////////////////////////
you can use the few procesing method with Vec2 and Vec3
method that you can use
the thing good with the Vec3, you can use the the "z" position !!!!
------------------------
ellipse(Vec pos, Vec size)
rect(Vec pos, Vec size) 
box(Vec p)
line(Vec a, Vec b) ;
point(Vec p)
vertex(Vec p)
bezierVertex(Vec a, Vec b, Vec c)
curveVertex(Vec a)
quadraticVertex(Vec a, Vec b)
background(Vec2 c) v color value and alpha value
background(Vec3 c) x,y,z color value
background(Vec4 c) x,y,z color value and alpha value

fill (Vec2 grey_alpha)
fill (Vec3 colour)
fill (Vec3 colour, float alpha)
fill (Vec4 colour_alpha)
stroke (Vec2 grey_alpha)
stroke (Vec3 colour)
stroke (Vec3 colour, float alpha)
stroke (Vec4 colour_alpha)


Matrix, translate, rotate
----------
translate(Vec t)

translateX(float t)
translateY(Float t)
translateZ(float t)

rotateXY(Vec2 rot) ;
rotateXZ(Vec2 rot) ;
rotateYZ(Vec2 rot) ;
rotateXYZ(Vec3 rot) ;


matrix_start() ;
use matrix 2D with cartesian coord
matrix_2D_start(Vec2 pos, float orientation)

use matrix 3D with cartesian coord
matrix_3D_start(Vec3 pos, Vec3 dir_cart)

use matrix 3D with polar coord
matrix_3D_start(Vec3 pos, Vec2 dir_polar)

matrix_end() ;





// INSTEAD new Vec(,) you can use directly Vec(,n,)
from Vec2(,) to Vec6(,,,,,)
those methode return a Vec value





// INTERNAL METHOD
//////////////////


SETTING
/////////////////////
set your Vector
------------------
Set you Vec from Vec2 to Vec6

your_vec.set(float value)
your_vec.set(float x, float y)
your_vec.set(Vec a)
your_vec.set(float [] list)







OPERATION
/////////////////

--------------
Multiplication 
available for Vec2, Vec3 and Vec4
---------------------------------
@ return Vec2, Vec3 or Vec4
> Multiplication vector by a same float
yourVec2.mult(float num)
yourVec3.mult(float num)
yourVec4.mult(float num)

@ return Vec2, Vec3 or Vec4
> Multiplication vector by a different float
yourVec2.mult(float num_1, float num_2)
yourVec3.mult(float num_1, float num_2, float num_3)
yourVec4.mult(float num_1, float num_2, float num_3, float num_4)

@ return Vec2, Vec3 or Vec4
> Multiplication vector by Vector 
> return componant mult by the float
yourVec.mult(Vec v)


--------
Division 
available for Vec2, Vec3 and Vec4
---------------------------------
@ return Vec2, Vec3 or Vec4
> Division vector by float
yourVec.div(float num)

> Division vector by Vector
> return componant mult by the float
yourVec.div(Vec v)


--------
Addition
available for Vec2, Vec3 and Vec4
---------------------------------
@ return Vec2, Vec3 or Vec4
> add float value to the original
yourVec.add(float value)

> add float value to the original
yourVec2.add(float value_a, float value_b)
yourVec3.add(float value_a, float value_b, float value_c)
yourVec4.add(float value_a, float value_b, float value_c, float value_d)

> add one vector to the original
yourVec.add(Vec v_a)

> add two vectors
yourVec.add(Vec v_a, Vec v_b)



------------
Substraction
available for Vec2, Vec3 and Vec4
---------------------------------
@ return Vec2, Vec3 or Vec4
> sub float value to the original
yourVec.sub(float value)

> sub float value to the original
yourVec2.sub(float value_a, float value_b)
yourVec3.sub(float value_a, float value_b, float value_c)
yourVec4.sub(float value_a, float value_b, float value_c, float value_d)

> sub one vector to the original
yourVec.sub(Vec v_a)
> sub two vectors
yourVec.sub(Vec v_a, Vec v_b)


----------------
Direction normal
available for Vec2, Vec3 and Vec4
---------------------------------
> give a normal and cartesian direction of your vector
@return Vec2
your_vec2.dir() ;
your_vec2.dir(float x, float y) ;
your_vec2.dir(Vec2 origin) ;

@return Vec3
your_vec3.dir() ;
your_vec3.dir(float x, float y, float z) ;
your_vec3.dir(Vec3 origin) ;

@return Vec4
your_vec4.dir() ;
your_vec4.dir(float x, float y, float z,float w) ;
your_vec4.dir(Vec4 origin) ;


--
Dot
available for Vec2, Vec3 and Vec4
---------------------------------
@ float
> return float of the vector dot
your_vec_2.dot(Vec2 target) ;
your_vec_2.dot(float x, float y) ;
your_vec_3.dot(Vec3 target) ;
your_vec_3.dot(float x, float y, float z) ;
your_vec_4.dot(Vec4 target) ;
your_vec_4.dot(float x, float y, float z, float w) ;









MISC
////////////////////////


cross
--------
@ Vec3
> return the cross of the vector
your_vec_3.cross(Vec3 target)


Tangent
---------
@return a Vec2 normal direction of the tangent of your vector target
your_vec2.tan() ;

// the method tan with target, give the possibility to find the tan between two vectors in any position
your_vec2.tan(Vec2 target) ;
your_vec2.tan(float target_x, float target_y) ;

your_vec3.tan(Vec3 vector_to_make_plane_ref) ;
your_vec3.tan(float vector_to_make_plane_ref, float ref_y, float ref_z) ;




Magnitude
available for Vec2, Vec3 and Vec4
---------------------------------
@ return float
> magnitude of the vectors 
your_vec_2.mag()
your_vec_3.mag()
your_vec_4.mag()
> magnitude of two vectors, between himself and the target vector
> return magnitude in float component
your_vec_2.mag(Vec2 v)
your_vec_3.mag(Vec3 v)
your_vec_4.mag(Vec4 v)




Distance
available for Vec2, Vec3 and Vec4
---------------------------------
@ return float
> distance between himself and the target vector
your_vec_2.dist(Vec3 v_target)
your_vec_3.dist(Vec3 v_target)
your_vec_4.dist(Vec4 v_target)




Max and Min component of Vector
----------------------------------
@ return float
your_vec_2.min()
your_vec_3.min()
your_vec_4.min()
your_vec_5.min()
your_vec_6.min()

@ return float
your_vec_2.max()
your_vec_3.max()
your_vec_4.max()
your_vec_5.max()
your_vec_6.max()




Copy
---------------
@ return Vec2, Vec3, Vec4 or Vec5
> Retunn the componant of the Vec, in Vec 
> Work for Vec2, Vec3, Vec4, Vec5
yourVec.copy() ;

> Return the componant of the Vec in PVector
> Work for Vec2 and Vec3, there is no PVector with 4 components
yourVec.copy_PVector() ;




---------
Normalize
available for Vec2, Vec3 and Vec4
---------------------------------
> map Vec on different scale
> return a normalize Vec 
your_vec_2.normalize(Vec2 min, Vec2 max) ;
your_vec_2.normalize(Vec2 max) ; // zero is the min value
your_vec_2.normalize() ;

your_vec_3.normalize(Vec3 min, Vec3 max) ;
your_vec_3.normalize(Vec3 max) ; // zero is the min value
your_vec_3.normalize() ;

your_vec_4.normalize(Vec4 min, Vec4 max) ;
your_vec_4.normalize(Vec4 max) ; // zero is the min value
your_vec_4.normalize() ;



Map
available for Vec2, Vec3 and Vec4
---------------------------------
> map Vec on different scale
yourVec2.mapVec(float minIn, float maxIn, float minOut, float maxOut)
yourVec3.mapVec(float minIn, float maxIn, float minOut, float maxOut)
yourVec4.mapVec(float minIn, float maxIn, float minOut, float maxOut)


Compare
available for Vec2, Vec3 and Vec4
---------------------------------
> compares Vec too an other one
@ return boolean
compare(float target)
compare(Vec2 target)
compare(float target_x, float target_y)
compare(Vec3 target)
compare(float target_x, float target_y, float target_z)
compare(Vec4 target)
compare(float target_x, float target_y, float target_z, float target_w)





CHANGE METHOD
/////////////

Revolution
------------------
@ return a Vec2
> the vector position make a circular move around a center positon
yourVec.revolution(int radius, int speed)
yourVec.revolution(int rx, int ry, int speed)
yourVec.revolution(Vec2 radius, int speed)

@ return a Vec3
> the vector position make a circular move around a center positon
yourVec.revolutionX(int radius, int speed)
yourVec.revolutionX(int rx, int ry, int speed)
yourVec.revolutionX(Vec2 radius, int speed)
--
yourVec.revolutionY(int radius, int speed)
yourVec.revolutionY(int rx, int ry, int speed)
yourVec.revolutionY(Vec2 radius, int speed)
--
yourVec.revolutionZ(int radius, int speed)
yourVec.revolutionZ(int rx, int ry, int speed)
yourVec.revolutionZ(Vec2 radius, int speed)


Jitter
available for Vec2, Vec3 and Vec4
---------------------------------
> the vector position returned is a random value between the pos minus the range and pos plus the range.

@ return a Vec2
yourVec.jitter(int range)
yourVec.revolution(int range_x, int range_y)
yourVec.revolution(Vec2 range)

@ return a Vec3
yourVec.jitter(int range)
yourVec.revolution(int range_x, int range_y,, int range_z)
yourVec.revolution(Vec3 range)

@ return a Vec4
yourVec.jitter(int range)
yourVec.revolution(int range_x, int range_y, int range_z, int range_w)
yourVec.revolution(Vec4 range)








/////////////////////////////////////////////////////////////////
// END INTERNAL METHOD
//////////////////////
































///////////////////
// EXTERNAL METHOD
//////////////////////////////////////////////////////////////////


Create Vec ext
--------------
@ return Vec2, Vec3, Vec4, Vec5
To create an random vector : 
use String "RANDOM"  for vector between negative value and positive one.
or "RANDOM_ZERO" ,for a value from zero to value
or "RANDOM_RANGE", for value between two others

Vec2()
Vec2(float x, float y)
Vec2(float v)
Vec2(PVector v)
Vec2(Vec2 v)
Vec2(String type_random, int x, int y)
Vec2(String type_random, int v)

Vec3()
Vec3(float x, float y, float z)
Vec3(float v)
Vec3(PVector v)
Vec3(Vec3 v)
Vec3(Vec2 v)
Vec3(String type_random, int x, int y, int z)
Vec3(String type_random, int v)

Vec4()
Vec4(float x, float y, float z, float w)
Vec4(float v)
Vec4(Vec4 v)
Vec4(Vec3 v)
Vec4(Vec2 v)
Vec4(Vec2 v,Vec2 v)
Vec4(String type_random, int x, int y, int z, int w)
Vec4(String type_random, int v)

Vec5()
Vec5(float a, float b, float c, float d, float e)
Vec5(float v)
Vec5(Vec5 v)
Vec5(Vec4 v)
Vec5(Vec3 v)
Vec5(Vec2 v)
Vec5(Vec2 v,Vec2 v)
Vec5(Vec3 v,Vec2 v)
Vec5(Vec2 v,Vec3 v)
Vec5(String type_random, int a, int b, int c, int d, int e)
Vec5(String type_random, int v)

Vec6()
Vec6(float a, float b, float c, float d, float e, float f)
Vec6(float v)
Vec6(Vec6 v)
Vec6(Vec5 v)
Vec6(Vec4 v)
Vec6(Vec3 v)
Vec6(Vec2 v)
Vec6(Vec2 v,Vec2 v)
Vec6(Vec3 v,Vec2 v)
Vec6(Vec4 v,Vec2 v)
Vec6(Vec2 v,Vec3 v)
Vec6(Vec2 v,Vec4 v)
Vec6(Vec3 v,Vec3 v)
Vec6(Vec2 v,Vec2 v,Vec2 v)
Vec6(String type_random, int a, int b, int c, int d, int e, int f)
Vec6(String type_random, int v)



addition ext
available for Vec2, Vec3 and Vec4
---------------------------------
@ return Vec2, Vec3 or Vec4
> return the sum of vectors
add(Vec2 v1, Vec2 v2)
add(Vec3 v1, Vec3 v2)
add(Vec4 v1, Vec4 v2)

add(Vec2 v1, float n)
add(Vec3 v1, float n)
add(Vec4 v1, float n)


substraction ext
available for Vec2, Vec3 and Vec4
---------------------------------
@ return Vec2, Vec3 or Vec4
> return the sum of vectors
sub(Vec2 v1, Vec2 v2)
sub(Vec3 v1, Vec3 v2)
sub(Vec4 v1, Vec4 v2)

sub(Vec2 v1, float n)
sub(Vec3 v1, float n)
sub(Vec4 v1, float n)


Multiplication ext
available for Vec2, Vec3 and Vec4
---------------------------------
> return the multi of two vectors
mult(Vec2 v1, Vec2 v2)
mult(Vec3 v1, Vec3 v2)
mult(Vec4 v1, Vec4 v2)

mult(Vec2 v1, float n)
mult(Vec3 v1, float n)
mult(Vec4 v1, float n)


Division ext
available for Vec2, Vec3 and Vec4
---------------------------------
> return the multi of two vectors
div(Vec2 v1, Vec2 v2)
div(Vec3 v1, Vec3 v2)
div(Vec4 v1, Vec4 v2)

div(Vec2 v1, float n)
div(Vec3 v1, float n)
div(Vec4 v1, float n)


Map ext
available for Vec2, Vec3 and Vec4
---------------------------------
@ return Vec2, Vec3 or Vec4
> return a mapping Vec on different scale
mapVec(Vec2 v, float minIn, float maxIn, float minOut, float maxOut)
mapVec(Vec3 v, float minIn, float maxIn, float minOut, float maxOut)
mapVec(Vec4 v, float minIn, float maxIn, float minOut, float maxOut)


Compare ext
available for Vec2, Vec3 and Vec4
---------------------------------
@ return boolean
> compares two Vec too check if those ones are identicals
compare(Vec2 v1, Vec2 v2)
compare(Vec3 v1, Vec3 v2)
compare(Vec4 v1, Vec4 v2)

> compares the first vec to check if this one is the area of the second vec
compare(Vec2 v1, Vec2 v2, Vec2 area)
compare(Vec3 v1, Vec3 v2, Vec3 area)
compare(Vec4 v1, Vec4 v2, Vec4 area)




Cross product
----------------
cross(Vec3 v_a, Vec3 v_b, Vec target) 



Magnitude ext
-------------
@return float
> return Magnitude of vector or length
mag(Vec2 v)
mag(Vec3 v)
mag(Vec4 v)
> magnitude of two vectors, between himself and the target vector */
mag(Vec2 v1, Vec2 v2)
mag(Vec3 v1, Vec3 v2)
mag(Vec4 v1, Vec4 v2)

Distance ext
------------
@ return float
> add two vectors
dist(Vec2 v_a, Vec2 v_b)
dist(Vec3 v_a, Vec3 v_b)
dist(Vec4 v_a, Vec4 v_b)


Middle ext
------------
@ return Vec2, Vec3 or Vec4
> find the middle position between two vectors
middle(Vec2 v_a, Vec2 v_b)
middle(Vec3 v_a, Vec3 v_b)
middle(Vec4 v_a, Vec4 v_b)

middle(Vec2 [] list_of_point)
middle(Vec3 [] list_of_point)
middle(Vec4 [] list_of_point)


Jitter ext
------------
@ return Vec2, Vec3 or Vec4
> jitter effect with a global range or specific range for each component of vec
jitter_2D(int range)
jitter_2D(Vec2 range)
jitter_2D(int range_x, int range_y)

jitter_3D(int range)
jitter_3D(Vec3 range)
jitter_3D(int range_x, int range_y, int range_z)

jitter_4D(int range)
jitter_4D(Vec4 range)
jitter_4D(int range_x, int range_y, int range_z, int range_w)


Normalize vector from angle
---------------------------
@return Vec2
> return vector position from an angle, this method work only with Vec2
norm_rad(float angle) ;
norm_deg(float angle) ;

> with this method you must indicate the String Name of the unit "DEG" for degrees or "RAD" for radians
norm_dir(String type, float angle) ;


Copy PVector to Vec ext
-----------------------
@ return Vec3
> transforme PVector to Vec3
copyPVectorToVec(PVector v)


// END VEC
//////////